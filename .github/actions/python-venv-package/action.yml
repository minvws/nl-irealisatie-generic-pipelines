name: "Python venv packager"
description: "Exports a Python venv package with the needed requirements installed"
inputs:
  python_version:
    description: "Python version"
    required: true
  package_file_name:
    description: "Name of the package"
    required: true
  checkout_repository:
    description: "Whether to checkout the repository (true or false)"
    required: false
    default: 'true'
  split_git_requirements:
    description: "Whether to split git requirements dependencies (true or false)"
    required: false
    default: 'true'
  working_directory:
    description: "Working directory containing a requirements.txt or poetry.lock file"
    required: false
    default: '.'

runs:
  using: "composite"
  steps:
    - name: Log deprecation warning
      shell: bash
      run: |
        echo "::warning title=Action deprecated::Please switch to the standlone version of this action: https://github.com/minvws/action-python-venv-package"

    - name: Set release version
      shell: bash
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Set package file name
      shell: bash
      run: echo "PACKAGE_FILE_NAME=${{ inputs.package_file_name }}_venv_${{ env.RELEASE_VERSION }}_python${{ inputs.python_version }}" >> $GITHUB_ENV

    - name: Checkout code
      if: inputs.checkout_repository == 'true'
      uses: actions/checkout@v5

    - name: Setup python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python_version }}
        cache: pip

    - name: Check if requirements file exists
      id: check_requirements_file
      shell: bash
      run: |
        if [ -f "${{ inputs.working_directory }}/requirements.txt" ]; then
          echo "::notice::requirements.txt file exists"
          echo "file_exists=true" >> $GITHUB_OUTPUT
        else
          echo "::notice::requirements.txt file does not exist"
          echo "file_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Check if poetry.lock file exists
      id: check_poetry_file
      shell: bash
      run: |
        if [ -f "${{ inputs.working_directory }}/poetry.lock" ]; then
          echo "::notice::poetry.lock file exists"
          echo "file_exists=true" >> $GITHUB_OUTPUT
        else
          echo "::notice::poetry.lock file does not exist"
          echo "file_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Export requirements (when Poetry)
      if: |
        steps.check_poetry_file.outputs.file_exists == 'true' &&
        steps.check_requirements_file.outputs.file_exists == 'false'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        pip3 install poetry
        poetry self add poetry-plugin-export
        poetry export > requirements.txt

    - name: Exit if requirements.txt file does not exist
      id: requirements-file-check
      shell: bash
      run: |
        requirements_file="${{ inputs.working_directory }}/requirements.txt"
        if [ ! -f $requirements_file ]; then
          echo "::error::requirements.txt file does not exist"
          exit 1
        fi
        echo "requirements-file=$requirements_file" >> $GITHUB_OUTPUT

    - name: Clean venv
      shell: bash
      run: rm -rf ${{ inputs.working_directory }}/.venv

    - uses: actions/cache/restore@v4
      id: cache-venv
      with:
        path: ${{ inputs.working_directory }}/.venv
        key: setup-venv-${{ runner.os }}-py-${{ steps.setup-python.outputs.python-version }}-${{ steps.setup-python.outputs.python-path }}-${{ hashFiles(steps.requirements-file-check.outputs.requirements-file) }}

    - name: Create venv
      if: steps.cache-venv.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        python -m venv .venv

    - name: Activate venv
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        source .venv/bin/activate
        echo "${VIRTUAL_ENV}/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=${VIRTUAL_ENV}" >> $GITHUB_ENV

    - name: Install requirements
      if: steps.cache-venv.outputs.cache-hit != 'true' && inputs.split_git_requirements == 'false'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: pip install -r requirements.txt

    - name: Split requirements
      if: steps.cache-venv.outputs.cache-hit != 'true' && inputs.split_git_requirements == 'true'
      id: split-requirements
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        grep 'git\+' requirements.txt > requirements-vcs.txt || true
        grep 'git\+' -v requirements.txt > requirements-packages.txt || true
        if grep -q -- '--hash=' requirements-packages.; then
          echo "✅ Found hashes in requirements-packages.txt"
          echo "require-hashes=--require-hashes" >> "$GITHUB_OUTPUT"
        else
          echo "❌ No hashes found in requirements-packages.txt"
          echo "require-hashes=" >> "$GITHUB_OUTPUT"
        fi
    
    - name: Show requirments
      if: steps.cache-venv.outputs.cache-hit != 'true' && inputs.split_git_requirements == 'true'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        echo "=== requirements-vcs.txt ==="
        cat requirements-vcs.txt
        echo "=== requirements-packages.txt ==="
        cat requirements-packages.txt

    - name: Install requirements
      if: steps.cache-venv.outputs.cache-hit != 'true' && inputs.split_git_requirements == 'true'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        if test -s requirements-vcs.txt; then
          pip install --no-deps -r requirements-vcs.txt
        fi
        if test -s requirements-packages.txt; then
          pip install --no-deps -r requirements-packages.txt ${{ steps.split-requirements.outputs.require-hashes }}
        fi

    - name: Cleanup split requirements
      if: steps.cache-venv.outputs.cache-hit != 'true' && inputs.split_git_requirements == 'true'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        rm requirements-vcs.txt requirements-packages.txt

    - uses: actions/cache/save@v4
      if: steps.cache-venv.outputs.cache-hit != 'true'
      with:
        path: ${{ inputs.working_directory }}/.venv
        key: setup-venv-${{ runner.os }}-py-${{ steps.setup-python.outputs.python-version }}-${{ steps.setup-python.outputs.python-path }}-${{ hashFiles(steps.requirements-file-check.outputs.requirements-file) }}

    - name: Fix python3 symlink - back to default location
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: cd .venv/bin && rm python3 python && ln -s /usr/bin/python3 python3 && ln -s /usr/bin/python python

    - name: Add version file
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: 'echo "{ \"version\": \"${{ env.RELEASE_VERSION }}\", \"git_ref\": \"$GITHUB_SHA\"}" > .venv/version.json'

    - name: Create archive
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: tar -czf ${{ env.PACKAGE_FILE_NAME }}.tar.gz .venv

    - name: Upload venv tar
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_FILE_NAME }}
        path: ${{ inputs.working_directory }}/${{ env.PACKAGE_FILE_NAME }}.tar.gz

    - name: Clean venv
      shell: bash
      run: rm -rf ${{ inputs.working_directory }}/.venv
